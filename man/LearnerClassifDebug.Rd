% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LearnerClassifDebug.R
\name{LearnerClassifDebug}
\alias{LearnerClassifDebug}
\title{Classification Learner for Debugging}
\description{
Classification Learner for Debugging

Classification Learner for Debugging
}
\details{
A simple \link{LearnerClassif} used primarily in the unit tests and for debugging purposes.
If no hyperparameter is set, it simply constantly predicts a randomly selected label.
The following hyperparameters trigger the following actions:
\describe{
\item{message_train:}{Outputs a message during train if the parameter value exceeds \code{runif(1)}.}
\item{message_predict:}{Outputs a message during predict if the parameter value exceeds \code{runif(1)}.}
\item{warning_train:}{Signals a warning during train if the parameter value exceeds \code{runif(1)}.}
\item{warning_predict:}{Signals a warning during predict if the parameter value exceeds \code{runif(1)}.}
\item{error_train:}{Raises an exception during train if the parameter value exceeds \code{runif(1)}.}
\item{error_predict:}{Raises an exception during predict if the parameter value exceeds \code{runif(1)}.}
\item{segfault_train:}{Provokes a segfault during train if the parameter value exceeds \code{runif(1)}.}
\item{segfault_predict:}{Provokes a segfault during predict if the parameter value exceeds \code{runif(1)}.}
\item{predict_missing}{Ratio of predictions which will be NA.}
\item{save_tasks:}{Saves input task in \code{model} slot during training and prediction.}
\item{x:}{Numeric parameter. Has no effect.}
}
Note that segfaults may not work on your operating system.
Also note that if they work, they will tear down your R session immediately!
}
\examples{
learner = lrn("classif.debug")
learner$param_set$values = list(message_train = 1, save_tasks = TRUE)

# this should signal a message
task = tsk("iris")
learner$train(task)
learner$predict(task)

# task_train and task_predict are the input tasks for train() and predict()
names(learner$model)
}
\seealso{
\link[mlr3misc:Dictionary]{Dictionary} of \link[=Learner]{Learners}: \link{mlr_learners}

\code{as.data.table(mlr_learners)} for a complete table of all (also dynamically created) \link{Learner} implementations.
}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3:LearnerClassif]{mlr3::LearnerClassif}} -> \code{LearnerClassifDebug}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{LearnerClassifDebug$new()}}
\item \href{#method-train_internal}{\code{LearnerClassifDebug$train_internal()}}
\item \href{#method-predict_internal}{\code{LearnerClassifDebug$predict_internal()}}
\item \href{#method-clone}{\code{LearnerClassifDebug$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format">}\href{../../mlr3/html/Learner.html#method-format}{\code{mlr3::Learner$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help">}\href{../../mlr3/html/Learner.html#method-help}{\code{mlr3::Learner$help()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict">}\href{../../mlr3/html/Learner.html#method-predict}{\code{mlr3::Learner$predict()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata">}\href{../../mlr3/html/Learner.html#method-predict_newdata}{\code{mlr3::Learner$predict_newdata()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print">}\href{../../mlr3/html/Learner.html#method-print}{\code{mlr3::Learner$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train">}\href{../../mlr3/html/Learner.html#method-train}{\code{mlr3::Learner$train()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Overrides the method to construct this learner.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifDebug$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-train_internal"></a>}}
\subsection{Method \code{train_internal()}}{
Overrides the method to train this learner.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifDebug$train_internal(task)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{The task to be used to train the learner.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The trained model.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-predict_internal"></a>}}
\subsection{Method \code{predict_internal()}}{
Overrides this learner's method to predict.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifDebug$predict_internal(task)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{The task to be used for prediction.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The predicted data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifDebug$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
